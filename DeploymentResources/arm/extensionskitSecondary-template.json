{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "sourceSystem": {
      "type": "string",
      "defaultValue": "u4ek",
      "metadata": {
        "description": "Extensions Kit Source System name"
      }
    },
    "serviceName": {
      "type": "string"
    },
    "sharedArtifactsVersion": {
      "type": "string",
      "metadata": {
        "description": "Version (build id) that identifies the shared deployment artifacts version to use"
      }
    },
    "orchestratorArtifactVersion": {
      "type": "string",
      "metadata": {
        "description": "Version (build id) that identifies the Orchestrator deployment artifacts version to use"
      }
    },
    "flowHistoryArtifactVersion": {
      "type": "string",
      "metadata": {
        "description": "Version (build id) that identifies the Flow History deployment artifacts version to use"
      }
    },
    "portalArtifactVersion": {
      "type": "string",
      "metadata": {
        "description": "Version (build id) that identifies the Portal deployment artifacts version to use"
      }
    },
    "flowServiceApiArtifactVersion": {
      "type": "string",
      "metadata": {
        "description": "Version (build id) that identifies the FlowServiceApi deployment artifacts version to use"
      }
    },
    "tenantConsumptionUpdaterArtifactVersion": {
      "type": "string",
      "metadata": {
        "description": "Version (build id) that identifies the Tenant Consumption Updater Service deployment artifacts version to use"
      }
    },
    "tenantsApiArtifactVersion": {
      "type": "string",
      "metadata": {
        "description": "Version (build id) that identifies the Tenants API Service deployment artifacts version to use"
      }
    },
    "artifactsContainerUri": {
      "type": "string",
      "metadata": {
        "description": "Uri for the Blob containing the deployment artifacts"
      }
    },
    "artifactsContainerSasToken": {
      "type": "string",
      "metadata": {
        "description": "SAS Token to access the Blob storage containing the deployment artifacts"
      }
    },
    "enableSwagger": {
      "type": "string",
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "enableSwaggerUi": {
      "type": "string",
      "defaultValue": "false",
      "allowedValues": [
        "true",
        "false"
      ]
    },
    "idsUri": {
      "type": "string",
      "metadata": {
        "description": "The base address for the IDS securing the Extension Kit eco-system"
      }
    },
    "daPushApiUri": {
      "type": "string",
      "metadata": {
        "description": "The base URI for the Digital Assistant Push Service API"
      }
    },
    "instantUIApiUri": {
      "type": "string",
      "metadata": {
        "description": "The address to NextGen's Instant UI Web API"
      }
    },
    "idsAmUri": {
      "type": "string"
    },
    "mhAccessProviderUri": {
      "type": "string"
    },
    "mhManagerUri": {
      "type": "string"
    },
    "ekAdminTenant": {
      "type": "string",
      "metadata": {
        "description": "Tenant used as admin tenant for Extensions Kit instance"
      }
    },
    "flowHistoryUriVersion": {
      "type": "string",
      "defaultValue": "v1",
      "metadata": {
        "description": "Flow History API Version"
      }
    },
    "u4LogTraceLevel": {
      "type": "string",
      "defaultValue": "Error"
    },
    "keyVaultSubscription": {
      "type": "string"
    },
    "keyVaultResourceGroup": {
      "type": "string"
    },
    "keyVaultName": {
      "type": "string"
    },
    "withCertificate": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "certificateSecretName": {
      "type": "string",
      "defaultValue": ""
    },
    "certificatePasswordName": {
      "type": "string",
      "defaultValue": ""
    },
    "customDomain": {
      "type": "string",
      "defaultValue": ""
    },
    "actionGroupMails": {
      "type": "array",
      "defaultValue": [ "hector.tortosa@unit4.com" ]
    },
    "customServiceName": {
      "type": "string",
      "defaultValue": ""
    },
    "ekOwnerEmail": {
      "type": "string"
    },
    "ekOwnerName": {
      "type": "string"
    },
    "extensionKitEmail": {
      "type": "string",
      "defaultValue": "no-reply-extensionkit@u4pp.com"
    },
    "appInsightsLocation": {
      "type": "string"
    },
    "deploymentModel": {
      "type": "string",
      "defaultValue": "PP",
      "allowedValues": [
        "SaaS",
        "PP"
      ]
    },
    "eventGridMaxEventSizeKb": {
      "type": "string",
      "defaultValue": "64",
      "metadata": {
        "description": "Max event size allowed by Event Grid. Bigger events will be stored in Storage Accoung"
      }
    },
    "eventGridStorageLocation": {
      "type": "string",
      "defaultValue": "internal-event-storage",
      "metadata": {
        "description": "Extensions Kit Blob container for EventGrid"
      }
    },
    "u4costId": {
      "type": "string",
      "defaultValue": ""
    },
    "appInsightsName": {
      "type": "string",
      "defaultValue": ""
    },
    "flowRuntimeAppServiceTier": {
      "type": "string",
      "defaultValue": "P1v2"
    },
    "noScaleAppServiceTier": {
      "type": "string",
      "defaultValue": "P1v2"
    },
    "userQueriesAppServiceTier": {
      "type": "string",
      "defaultValue": "S2"
    },
    "flowRuntimeMaxInstances": {
      "type": "string",
      "defaultValue": "2"
    },
    "flowEventsStorage": {
      "type": "string",
      "defaultValue": "flow-events-storage",
      "metadata": {
        "description": "Extension Kit Blob container for FlowEvents"
      }
    },
    "secondaryRegion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Document DB secondary region for multi-region writes"
      }
    },
    "defaultConsumptionThreshold": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "The default value for consumption threshold for a new tenant"
      }
    },
    "discoveryServiceUri": {
      "type": "string",
      "metadata": {
        "description": "The Uri to Discovery Service"
      }
    },
    "discoveryIdsUri": {
      "type": "string",
      "metadata": {
        "description": "The authority Uri to Discovery Service"
      }
    },
    "discoveryIdsClientId": {
      "type": "string",
      "metadata": {
        "description": "The Client Id of Discovery Service"
      }
    },
    "discoveryIdsClientSecret": {
      "type": "string",
      "metadata": {
        "description": "The Client Secret of Discovery Service"
      }
    },
    "triggerHttpWebhookV2TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "triggerHttpWebhookV2Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "triggerSchedulerV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "triggerSchedulerV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "triggerMessageHubV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "triggerMessageHubV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionHttpRequestV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionHttpRequestV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionJsonParseV2TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionJsonParseV2Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionJsonToXmlV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionJsonToXmlV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionXmlParseV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionXmlParseV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionForEachV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionForEachV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionPgpEncryptV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionPgpEncryptV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionPgpDecryptV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionPgpDecryptV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionSignXmlV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionSignXmlV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionVerifyXmlV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionVerifyXmlV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionXmlEncryptV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionXmlEncryptV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionSftpListV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionSftpListV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionSftpGetContentV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionSftpGetContentV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionSftpDeleteV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionSftpDeleteV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionSftpCreateV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionSftpCreateV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionXsltV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionXsltV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionXslt3V1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionXslt3V1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionEventGridPublishV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionEventGridPublishV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionStopV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionStopV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionUnit4IdResolverV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionUnit4IdResolverV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionDaQuestionV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionDaQuestionV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionDaPushTextV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionDaPushTextV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionDaTravelRequestV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionDaTravelRequestV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionMHActorV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionMHActorV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionMHEventV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionMHEventV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionEmailV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionEmailV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionInstantUIV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionInstantUIV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "actionXmlDecryptV1TemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extension resources"
      }
    },
    "actionXmlDecryptV1Version": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "extensionsApiTemplateFilePath": {
      "type": "string",
      "metadata": {
        "description": "Path in the storage container pointing to extensions api resources"
      }
    },
    "extensionsApiVersion": {
      "type": "string",
      "metadata": {
        "description": "Version of the service"
      }
    },
    "releaseVersion": {
      "type": "string",
      "defaultValue": ""
    },
    "hibernationServicesTemplateFilePath": {
      "type": "string"
    },
    "hibernationServicesVersion": {
      "type": "string"
    },
    "classicApiTemplateFilePath": {
      "type": "string"
    },
    "classicApiVersion": {
      "type": "string"
    },
    "flowMetricsFunctionTemplateFilePath": {
      "type": "string"
    },
    "flowMetricsFunctionVersion": {
      "type": "string"
    },
    "xsltFunctionTemplateFilePath": {
      "type": "string"
    },
    "xsltFunctionVersion": {
      "type": "string"
    },
    "notificationsFunctionTemplateFilePath": {
      "type": "string"
    },
    "notificationsFunctionVersion": {
      "type": "string"
    },
    "invitationSenderFunctionTemplateFilePath": {
      "type": "string"
    },
    "invitationSenderFunctionVersion": {
      "type": "string"
    },
    "tenantActivationFunctionTemplateFilePath": {
      "type": "string"
    },
    "tenantActivationFunctionVersion": {
      "type": "string"
    },
    "apiManagementSkuName": {
      "type": "string"
    },
    "apiManagementSkuCapacity": {
      "type": "int"
    },
    "useFunctionPremiumServicePlan": {
      "type": "string",
      "allowedValues": [
        "yes",
        "no"
      ],
      "defaultValue": "no"
    },
    "primaryDocumentDbUri": {
      "type": "string"
    },
    "primaryDocumentDbKey": {
      "type": "securestring"
    },
    "primaryDocumentDbConnectionString": {
      "type": "securestring"
    },
    "primaryStorageAccountConnectionString": {
      "type": "securestring"
    },
    "primaryEventGridTopicEndpoint": {
      "type": "string"
    },
    "primaryEventGridTopicAccessKey": {
      "type": "securestring"
    },
    "primaryStorageAccountName": {
      "type": "string"
    },
    "azureLocation": {
      "type": "string"
    },
    "primaryRedisUri": {
      "type": "string"
    },
    "primaryRedisKey": {
      "type": "securestring"
    },
    "workspaceName": {
      "type": "string"
    },
    "workspaceRg": {
      "type": "string"
    },
    "appStudioApiUri": {
      "type": "string"
    },
    "appStudioRendererUri": {
      "type": "string"
    },
    "appStudioBundle": {
      "type": "string"
    },
    "appStudioFeatureFlag": {
      "type": "bool",
      "defaultValue": false
    },
    "enableMTLS": {
      "type": "bool",
      "defaultValue": false
    }
  },
  "variables": {
    "linkedTemplatesUri": "[concat(parameters('artifactsContainerUri'), 'shared/', parameters('sharedArtifactsVersion'),'/')]",
    "linkedCertificateTemplateUri": "[concat(variables('linkedTemplatesUri'), 'certificate.json', parameters('artifactsContainerSasToken'))]",
    "linkedAppInsightsTemplateUri": "[concat(variables('linkedTemplatesUri'), 'applicationInsights.json', parameters('artifactsContainerSasToken'))]",
    "linkedAppServicePlanTemplateUri": "[concat(variables('linkedTemplatesUri'), 'appServicePlan.json', parameters('artifactsContainerSasToken'))]",
    "linkedBasicAlertMetricsTemplateUri": "[concat(variables('linkedTemplatesUri'), 'basicMetricAlerts.json', parameters('artifactsContainerSasToken'))]",
    "linkedApiManagementTemplateUri": "[concat(variables('linkedTemplatesUri'), 'apiManagement.json', parameters('artifactsContainerSasToken'))]",
    "linkedApiManagementWithCertificateTemplateUri": "[concat(variables('linkedTemplatesUri'), 'apiManagementWithCertificate.json', parameters('artifactsContainerSasToken'))]",
    "linkedFunctionPremiumPlanTemplateUri": "[concat(variables('linkedTemplatesUri'), 'azureFunctionPremiumPlan.json', parameters('artifactsContainerSasToken'))]",

    "apiTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('classicApiTemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "tenantsServiceTemplateUri": "[concat(parameters('artifactsContainerUri'), 'Tenants/', parameters('tenantsApiArtifactVersion'),'/', 'tenant-service.json', parameters('artifactsContainerSasToken'))]",
    "tenantConsumptionUpdaterUri": "[concat(parameters('artifactsContainerUri'), 'TenantsConsumption/', parameters('tenantConsumptionUpdaterArtifactVersion'),'/', 'tenant-consumption-updater.json', parameters('artifactsContainerSasToken'))]",
    "tenantActivationFunctionTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('tenantActivationFunctionTemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "flowServiceApiTemplateUri": "[concat(parameters('artifactsContainerUri'), 'FlowService/', parameters('flowServiceApiArtifactVersion'),'/', 'flow-service-api.json', parameters('artifactsContainerSasToken'))]",
    "orchestratorTemplateUri": "[concat(parameters('artifactsContainerUri'), 'Orchestrator/', parameters('orchestratorArtifactVersion'),'/', 'orchestrator-template.json', parameters('artifactsContainerSasToken'))]",
    "flowHistoryTemplateUri": "[concat(parameters('artifactsContainerUri'), 'FlowHistory/', parameters('flowHistoryArtifactVersion'),'/', 'flowhistory-template.json', parameters('artifactsContainerSasToken'))]",
    "portalTemplateUri": "[concat(parameters('artifactsContainerUri'), 'Portal/', parameters('portalArtifactVersion'),'/', 'portal-template.json', parameters('artifactsContainerSasToken'))]",
    "flowMetricsFunctionTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('flowMetricsFunctionTemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "xsltFunctionTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('xsltFunctionTemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "notificationsFunctionTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('notificationsFunctionTemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "invitationSenderFunctionTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('invitationSenderFunctionTemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "hibernationServicesTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('hibernationServicesTemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "extensionsApiFunctionAppTemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('extensionsApiTemplateFilePath'), parameters('artifactsContainerSasToken'))]",

    "triggerHttpWebhookV2TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('triggerHttpWebhookV2TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "triggerMessageHubV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('triggerMessageHubV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "triggerSchedulerV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('triggerSchedulerV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionHttpRequestV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionHttpRequestV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionUnit4IdResolverV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionUnit4IdResolverV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionDaQuestionV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionDaQuestionV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionDaPushTextV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionDaPushTextV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionDaTravelRequestV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionDaTravelRequestV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionMhActorV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionMhActorV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionMhEventV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionMhEventV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionEmailV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionEmailV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionInstantUiV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionInstantUiV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionXmlParseV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionXmlParseV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionJsonParseV2TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionJsonParseV2TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionJsonToXmlV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionJsonToXmlV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionEventGridPublishV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionEventGridPublishV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionStopV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionStopV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionForEachV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionForEachV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionPgpEncryptV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionPgpEncryptV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionPgpDecryptV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionPgpDecryptV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionSignXmlV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionSignXmlV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionVerifyXmlV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionVerifyXmlV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionSftpListV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionSftpListV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionSftpGetContentV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionSftpGetContentV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionSftpDeleteV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionSftpDeleteV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionSftpCreateV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionSftpCreateV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionXsltV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionXsltV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionXslt3V1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionXslt3V1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionXmlEncryptV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionXmlEncryptV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",
    "actionXmlDecryptV1TemplateUri": "[concat(parameters('artifactsContainerUri'), parameters('actionXmlDecryptV1TemplateFilePath'), parameters('artifactsContainerSasToken'))]",

    "internalClientId": "[concat(parameters('serviceName'), '-internal')]",
    "provisionerClientId": "[concat(parameters('serviceName'), '-provisioner')]",
    "portalClientId": "[concat(parameters('serviceName'), '-portal-pkce')]",

    "certificateName": "[concat(parameters('serviceName'), '-cert')]",
    "appInsightsName": "[if(empty(parameters('appInsightsName')), parameters('serviceName'), parameters('appInsightsName'))]",
    "storageAccountName": "[parameters('primaryStorageAccountName')]",
    "flowRuntimeAppServicePlanName": "[concat(parameters('serviceName'), '-flow-runtime')]",
    "noScaleAppServicePlanName": "[concat(parameters('serviceName'), '-no-scale')]",
    "consumptionAppServicePlanName": "[concat(parameters('serviceName'), '-consumption')]",
    "userQueriesAppServicePlanName": "[concat(parameters('serviceName'), '-user-queries')]",
    "functionPremiumServicePlanName": "[concat(parameters('serviceName'), '-function-premium')]",
    "apiName": "[concat(parameters('serviceName'), '-api')]",
    "apiTenantsName": "[concat(parameters('serviceName'), '-', variables('tenantsServiceName'))]",
    "apiFlowServiceName": "[concat(parameters('serviceName'), '-', variables('flowServiceName'))]",
    "orchestratorName": "[concat(parameters('serviceName'), '-orchestrator-functions')]",
    "flowHistoryName": "[concat(parameters('serviceName'), '-flowHistory')]",
    "flowHistoryArchiveFunctionAppName": "[concat(parameters('serviceName'), '-functions-flowhistory')]",
    "flowHistoryApiWriterFunctionAppName": "[concat(parameters('serviceName'), '-flowhistory-writer-function')]",
    "flowHistoryDataCleanerFunctionAppName": "[concat(parameters('serviceName'), '-flowhistory-data-cleaner-function')]",
    "portalName": "[concat(parameters('serviceName'), '-portal')]",
    "functionsDotnetName": "[concat(parameters('serviceName'), '-functions-dotnet')]",
    "xsltFunctionName": "[concat(parameters('serviceName'), '-functions-xslt')]",
    "extensionsAppServiceName": "[concat(parameters('serviceName'), '-extensions')]",
    "xmlParseFunctionAppServiceName": "[concat(parameters('serviceName'), '-xml-parse-function')]",
    "xsltFunctionAppServiceName": "[concat(parameters('serviceName'), '-xslt-transformation-function')]",
    "xslt3FunctionAppServiceName": "[concat(parameters('serviceName'), '-xslt3-transformation-function')]",
    "jsonParseFunctionAppServiceName": "[concat(parameters('serviceName'), '-json-parse-function')]",
    "jsonToXmlFunctionAppServiceName": "[concat(parameters('serviceName'), '-json-to-xml-function')]",
    "forEachFunctionAppServiceName": "[concat(parameters('serviceName'), '-for-each-function')]",
    "pgpEncryptFunctionAppServiceName": "[concat(parameters('serviceName'), '-pgp-encrypt-function')]",
    "pgpDecryptFunctionAppServiceName": "[concat(parameters('serviceName'), '-pgp-decrypt-function')]",
    "signXmlFunctionAppServiceName": "[concat(parameters('serviceName'), '-sign-xml-function')]",
    "verifyXmlFunctionAppServiceName": "[concat(parameters('serviceName'), '-verify-xml-function')]",
    "xmlEncryptFunctionAppServiceName": "[concat(parameters('serviceName'), '-xml-encrypt-function')]",
    "stopFunctionAppServiceName": "[concat(parameters('serviceName'), '-stop-function')]",
    "eventGridPublishFunctionAppServiceName": "[concat(parameters('serviceName'), '-event-grid-publish-function')]",
    "flowNotificationFunctionAppServiceName": "[concat(parameters('serviceName'), '-flow-notification-function')]",
    "invitationSenderFunctionAppServiceName": "[concat(parameters('serviceName'), '-invitation-sender')]",
    "xmlDecryptFunctionAppServiceName": "[concat(parameters('serviceName'), '-xml-decrypt-function')]",
    "hibernationName": "[concat(parameters('serviceName'), '-hibernation')]",
    "orchestratorServicePlan": "[if(equals(parameters('useFunctionPremiumServicePlan'), 'yes'), variables('functionPremiumServicePlanName'), variables('consumptionAppServicePlanName'))]",

    "tenantsServiceName": "tenants",
    "flowServiceName": "flows",

    "shouldUseCustomValues": "[and(or(equals(parameters('deploymentModel'), 'PP'), equals(parameters('deploymentModel'), 'SaaS')), not(empty(parameters('customDomain'))))]",
    "urlAvailabilityTestDomain": "[if(variables('shouldUseCustomValues'), parameters('customDomain'), 'azurewebsites.net')]",
    "urlAvailabilityServiceName": "[if(variables('shouldUseCustomValues'), parameters('customServiceName'), parameters('serviceName'))]",
    "urlDomain": "[if(equals(parameters('deploymentModel'), 'PP'), if(empty(parameters('customDomain')), 'azurewebsites.net', parameters('customDomain')), 'azurewebsites.net')]",
    "customServiceNameUrl": "[if(equals(parameters('deploymentModel'), 'PP'), if(empty(parameters('customServiceName')), parameters('serviceName'), parameters('customServiceName')), parameters('serviceName'))]",

    "ekPortalUri": "[concat('https://', variables('customServiceNameUrl'), '-portal.', variables('urlDomain'))]",
    "ekApiUri": "[concat('https://', variables('customServiceNameUrl'), '-api.', variables('urlDomain'))]",
    "extensionsApiUri": "[concat('https://', variables('customServiceNameUrl'), '-extensions.', variables('urlDomain'))]",
    "flowsApiUri": "[concat('https://', variables('customServiceNameUrl'), '-flows.', variables('urlDomain'))]",
    "flowHistoryUri": "[concat('https://', variables('customServiceNameUrl'), '-flowhistory.', variables('urlDomain'))]",
    "hibernationApiUri": "[concat('https://', variables('customServiceNameUrl'), '-hibernation.', variables('urlDomain'))]",
    "tenantsApiUri": "[concat('https://', variables('customServiceNameUrl'), '-tenants.', variables('urlDomain'))]",
    "functionSendUserInvitationUri": "[concat('https://', variables('customServiceNameUrl'), '-invitation-sender.', variables('urlDomain'), '/api/InvitationSender')]",
    "xsltFunctionsUri": "[concat('https://', variables('customServiceNameUrl'), '-functions-xslt.', variables('urlDomain'))]",

    "webhookV2Name": "[concat(parameters('serviceName'), '-trigger-http-webhook-v2')]",
    "triggerMHEventsName": "[concat(parameters('serviceName'), '-trigger-message-hub')]",
    "schedulerName": "[concat(parameters('serviceName'), '-trigger-scheduler-eg')]",

    "apiManagementName": "[concat(variables('customServiceNameUrl'), '-serverless-gateway')]",
    "apiManagementWithCertificateName": "[concat(variables('customServiceNameUrl'), '-serverless-mtls-gateway')]",
    "apiManagementApiUri": "[concat('https://', variables('apiManagementName'), '.azure-api.net')]",
    "apiManagementWithCertificateApiUri": "[concat('https://', variables('apiManagementWithCertificateName'), '.azure-api.net')]",

    "tenantConsumptionUpdaterFunctionName": "[concat(parameters('serviceName'), '-tenant-consumption-updater')]",
    "tenantActivationFunctionName": "[concat(parameters('serviceName'), '-taf')]",

    "idsAuthority": "[concat(parameters('idsUri'), '/identity')]",

    "webhookUri": "[concat('https://', variables('customServiceNameUrl'), '-trigger-http-webhook.', variables('urlDomain'))]",
    "webhookV2Uri": "[concat('https://', variables('customServiceNameUrl'), '-trigger-http-webhook-v2.', variables('urlDomain'))]",
    "serviceNames": [
      "[variables('apiName')]",
      "[variables('apiTenantsName')]",
      "[variables('apiFlowServiceName')]",
      "[variables('flowHistoryName')]",
      "[variables('orchestratorName')]",
      "[variables('portalName')]"
    ],
    "servicePlanNames": [
      "[variables('flowRuntimeAppServicePlanName')]"
    ],
    "ekInternalEventGridKey": "[concat(parameters('serviceName'), '-internal-eventgrid-secret')]",
    "primary": "No"
  },
  "resources": [
    {
      "condition": "[equals(parameters('withCertificate'), 'yes')]",
      "apiVersion": "2019-08-01",
      "name": "Certificate",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedCertificateTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "certificateName": {
            "value": "[variables('certificateName')]"
          },
          "certificate": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[parameters('certificateSecretName')]"
            }
          },
          "certificatePassword": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[parameters('certificatePasswordName')]"
            }
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "AppInsights",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedAppInsightsTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "resourceName": {
            "value": "[variables('appInsightsName')]"
          },
          "actionGroupMails": {
            "value": "[parameters('actionGroupMails')]"
          },
          "location": {
            "value": "[parameters('appInsightsLocation')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "workspaceName": {
            "value": "[parameters('workspaceName')]"
          },
          "workspaceRg": {
            "value": "[parameters('workspaceRg')]"
          },
          "availabilityTests": {
            "value": [
              {
                "name": "[concat(parameters('serviceName'), '-flow-history-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-flowhistory.', variables('urlAvailabilityTestDomain'))]",
                "description": "Flow history health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-hibernation-service-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-hibernation.', variables('urlAvailabilityTestDomain'))]",
                "description": "Hibernation service health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-orchestrator-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-orchestrator-functions.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Orchestrator health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-da-push-text-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-da-push-text-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Digital Assistant push text health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-da-push-travel-request-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-da-push-travel-request-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Digital Assistant travel request health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-da-question-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-da-question-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Digital Assistant question health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-email-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-email-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Email action health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-http-request-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-http-request-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Http Request action health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-instant-ui-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-instant-ui-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Instant UI health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-mh-actor-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-mh-actor-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Message hub actor health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-mh-event-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-mh-event-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Message hub event health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-json-parse-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-json-parse-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Json Parse health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-stop-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-stop-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Stop health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-unit4id-resolver-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-unit4id-resolver-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Unit4Id Resolver health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-xml-parse-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-xml-parse-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Xml Parse health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-for-each-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-for-each-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "For Each health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-pgp-encrypt-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-pgp-encrypt-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Pgp Encrypt health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-pgp-decrypt-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-pgp-decrypt-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Pgp Decrypt health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-sign-xml-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-sign-xml-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Sign Xml health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-verify-xml-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-verify-xml-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Verify Xml health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-xml-encrypt-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-xml-encrypt-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Xml Encrypt health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-sftp-list-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-sftp-list-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Sftp List health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-sftp-get-content-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-sftp-get-content-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Sftp Get Content health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-sftp-delete-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-sftp-delete-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Sftp Delete health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-sftp-create-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-sftp-create-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Sftp Create health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-xslt-transformation-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-xslt-transformation-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Xslt health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-xslt3-transformation-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-xslt3-transformation-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Xslt3 health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-json-to-xml-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-json-to-xml-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Json To Xml health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-trigger-http-webhook-v2-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-trigger-http-webhook-v2.', variables('urlAvailabilityTestDomain'))]",
                "description": "Trigger Webhook V2 health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-trigger-scheduler-eg-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-trigger-scheduler-eg.', variables('urlAvailabilityTestDomain'))]",
                "description": "Trigger Scheduler health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-trigger-message-hub-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-trigger-message-hub.', variables('urlAvailabilityTestDomain'))]",
                "description": "Trigger Message Hub health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-api-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-api.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Public API health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-portal-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-portal.', variables('urlAvailabilityTestDomain'))]",
                "description": "Portal health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-flow-notification-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-flow-notification-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Flow Notification health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-tenant-consumption-updater-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-tenant-consumption-updater.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "TenantConsumptionUpdater health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-tenants-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-tenants.', variables('urlAvailabilityTestDomain'))]",
                "description": "Tenants Service health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-extensions-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-extensions.', variables('urlAvailabilityTestDomain'))]",
                "description": "Extensions Service health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-flows-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-flows.', variables('urlAvailabilityTestDomain'))]",
                "description": "Flows Service health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-flowhistory-data-cleaner-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-flowhistory-data-cleaner-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Flow history data cleaner health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-taf-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-taf.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Verify tenant activation function health status"
              },
              {
                "name": "[concat(parameters('serviceName'), '-xml-decrypt-function-availability')]",
                "url": "[concat('https://', variables('urlAvailabilityServiceName'), '-xml-decrypt-function.', variables('urlAvailabilityTestDomain'), '/api')]",
                "description": "Xml Decrypt health status"
              }
            ]
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "AppServicePlans",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedAppServicePlanTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "flowRuntimeAppServicePlanName": {
            "value": "[variables('flowRuntimeAppServicePlanName')]"
          },
          "flowRuntimeAppServiceTier": {
            "value": "[parameters('flowRuntimeAppServiceTier')]"
          },
          "flowRuntimeMaxInstances": {
            "value": "[parameters('flowRuntimeMaxInstances')]"
          },
          "noScaleAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "noScaleAppServiceTier": {
            "value": "[parameters('noScaleAppServiceTier')]"
          },
          "consumptionAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "userQueriesAppServicePlanName": {
            "value": "[variables('userQueriesAppServicePlanName')]"
          },
          "userQueriesAppServiceTier": {
            "value": "[parameters('userQueriesAppServiceTier')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2021-04-01",
      "name": "AzureFunctionPremiumServicePlan",
      "type": "Microsoft.Resources/deployments",
      "condition": "[equals(parameters('useFunctionPremiumServicePlan'), 'yes')]",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedFunctionPremiumPlanTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "location": {
            "value": "[resourceGroup().location]"
          },
          "hostingPlanName": {
            "value": "[variables('functionPremiumServicePlanName')]"
          },
          "sku": {
            "value": "ElasticPremium"
          },
          "skuCode": {
            "value": "EP1"
          },
          "workerSize": {
            "value": "3"
          },
          "workerSizeId": {
            "value": "3"
          },
          "numberOfWorkers": {
            "value": "1"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "API",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('apiTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('classicApiVersion')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "ekTenant": {
            "value": "[parameters('serviceName')]"
          },
          "ekAdminTenant": {
            "value": "[parameters('ekAdminTenant')]"
          },
          "apiName": {
            "value": "[variables('apiName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "documentDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "documentDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "idsAmUri": {
            "value": "[parameters('idsAmUri')]"
          },
          "extensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "flowsApiUri": {
            "value": "[variables('flowsApiUri')]"
          },
          "tenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "enableSwagger": {
            "value": "[parameters('enableSwagger')]"
          },
          "enableSwaggerUi": {
            "value": "[parameters('enableSwaggerUi')]"
          },
          "u4LogInstanceName": {
            "value": "[parameters('serviceName')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "u4LogTraceLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "azureLocation": {
            "value": "[parameters('azureLocation')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "TenantsAPI",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('tenantsServiceTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "amUri": {
            "value": "[parameters('idsAmUri')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "appServicePlanName": {
            "value": "[variables('userQueriesAppServicePlanName')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "defaultConsumptionThreshold": {
            "value": "[parameters('defaultConsumptionThreshold')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "documentDbSecondaryRegion": {
            "value": "[parameters('secondaryRegion')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "serviceName": {
            "value": "[variables('tenantsServiceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('tenantsApiArtifactVersion')]"
          },
          "sourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "tenantInformationDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "tenantInformationDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "mhAccessProviderUri": {
            "value": "[parameters('mhAccessProviderUri')]"
          },
          "mhManagerUri": {
            "value": "[parameters('mhManagerUri')]"
          },
          "mhClientId": {
            "value": "[variables('provisionerClientId')]"
          },
          "mhClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('provisionerClientId'), '-secret')]"
            }
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          },
          "enableSwagger": {
            "value": "[parameters('enableSwagger')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "Orchestrator",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights",
        "API"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('orchestratorTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('orchestratorArtifactVersion')]"
          },
          "orchestratorName": {
            "value": "[variables('orchestratorName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('orchestratorServicePlan')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "extensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "flowsApiUri": {
            "value": "[variables('flowsApiUri')]"
          },
          "tenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "cosmosDbEndpoint": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "cosmosDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "cosmosDbSecondaryRegion": {
            "value": "[parameters('secondaryRegion')]"
          },
          "discoveryServiceUri": {
            "value": "[parameters('discoveryServiceUri')]"
          },
          "redisUri": {
            "value": "[parameters('primaryRedisUri')]"
          },
          "redisPrimaryKey": {
            "value": "[parameters('primaryRedisKey')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          },
          "discoveryIdsUri": {
            "value": "[parameters('discoveryIdsUri')]"
          },
          "discoveryIdsClientId": {
            "value": "[parameters('discoveryIdsClientId')]"
          },
          "discoveryIdsClientSecret": {
            "value": "[parameters('discoveryIdsClientSecret')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "FlowHistory",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('flowHistoryTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('flowHistoryArtifactVersion')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "ekAdminTenant": {
            "value": "[parameters('ekAdminTenant')]"
          },
          "flowHistoryName": {
            "value": "[variables('flowHistoryName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('flowRuntimeAppServicePlanName')]"
          },
          "flowHistoryReadsAppServicePlanName": {
            "value": "[variables('userQueriesAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "documentDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "documentDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "ekInternalEventGridKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "flowHistoryArchiveFunctionAppName": {
            "value": "[variables('flowHistoryArchiveFunctionAppName')]"
          },
          "flowHistoryApiWriterFunctionAppName": {
            "value": "[variables('flowHistoryApiWriterFunctionAppName')]"
          },
          "flowHistoryDataCleanerFunctionAppName": {
            "value": "[variables('flowHistoryDataCleanerFunctionAppName')]"
          },
          "flowEventsBlobContainerName": {
            "value": "[parameters('flowEventsStorage')]"
          },
          "extensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "Portal",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights",
        "API",
        "FlowHistory"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('portalTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('portalArtifactVersion')]"
          },
          "releaseVersion": {
            "value": "[parameters('releaseVersion')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "ekAdminTenant": {
            "value": "[parameters('ekAdminTenant')]"
          },
          "portalName": {
            "value": "[variables('portalName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('userQueriesAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "idsAmUri": {
            "value": "[parameters('idsAmUri')]"
          },
          "mhManagerUri": {
            "value": "[parameters('mhManagerUri')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "ekApiUri": {
            "value": "[variables('ekApiUri')]"
          },
          "ekFlowsApiUri": {
            "value": "[variables('flowsApiUri')]"
          },
          "ekExtensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "ekPortalClientId": {
            "value": "[variables('portalClientId')]"
          },
          "ekPortalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('portalClientId'), '-secret')]"
            }
          },
          "ekFlowHistoryUri": {
            "value": "[variables('flowHistoryUri')]"
          },
          "ekFlowHistoryUriVersion": {
            "value": "[parameters('flowHistoryUriVersion')]"
          },
          "ekInvitationSenderFunctionUri": {
            "value": "[variables('functionSendUserInvitationUri')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "sendGridApiKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-send-grid-api-key')]"
            }
          },
          "emailSender": {
            "value": "[parameters('extensionKitEmail')]"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "appStudioApiServiceUrl": {
            "value": "[parameters('appStudioApiUri')]"
          },
          "appStudioRendererServiceUrl": {
            "value": "[parameters('appStudioRendererUri')]"
          },
          "appStudioBundle": {
            "value": "[parameters('appStudioBundle')]"
          },
          "appStudioFeatureFlag": {
            "value": "[parameters('appStudioFeatureFlag')]"
          },
          "discoveryUri": {
            "value": "[parameters('discoveryServiceUri')]"
          },
          "discoveryIdsUri": {
            "value": "[parameters('discoveryIdsUri')]"
          },
          "discoveryIdsClientId": {
            "value": "[parameters('discoveryIdsClientId')]"
          },
          "discoveryIdsClientSecret": {
            "value": "[parameters('discoveryIdsClientSecret')]"
          },
          "redisUri": {
            "value": "[parameters('primaryRedisUri')]"
          },
          "redisPrimaryKey": {
            "value": "[parameters('primaryRedisKey')]"
          },
          "enableMTLS": {
            "value": "[parameters('enableMTLS')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "FlowMetricsFunction",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('flowMetricsFunctionTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('flowMetricsFunctionVersion')]"
          },
          "functionAppName": {
            "value": "[variables('functionsDotnetName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "FlowHistoryDocumentDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "FlowHistoryDocumentDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "FlowHistoryDocumentDbConnection": {
            "value": "[parameters('primaryDocumentDbConnectionString')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "XsltProcessorFunction",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "StorageAccount",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('xsltFunctionTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('xsltFunctionVersion')]"
          },
          "functionAppName": {
            "value": "[variables('xsltFunctionName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "TriggerWebhookV2",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "API",
        "AppServicePlans",
        "StorageAccount"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('triggerHttpWebhookV2TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "webhookName": {
            "value": "[variables('webhookV2Name')]"
          },
          "appServicePlanName": {
            "value": "[variables('flowRuntimeAppServicePlanName')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "ekApiUri": {
            "value": "[variables('ekApiUri')]"
          },
          "extensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "apiManagementApiAddress": {
            "value": "[variables('apiManagementApiUri')]"
          },
          "apiManagementWithCertificateApiAddress": {
            "value": "[variables('apiManagementWithCertificateApiUri')]"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "serviceVersion": {
            "value": "[parameters('triggerHttpWebhookV2Version')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "storageConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "TriggerMessageHubEvents",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "API",
        "AppServicePlans"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('triggerMessageHubV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('triggerMessageHubV1Version')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "ekTenant": {
            "value": "[parameters('serviceName')]"
          },
          "ekApiUri": {
            "value": "[variables('ekApiUri')]"
          },
          "extensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "mhEventsName": {
            "value": "[variables('triggerMHEventsName')]"
          },
          "appServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "mhAccessProviderUri": {
            "value": "[parameters('mhAccessProviderUri')]"
          },
          "mhManagerUri": {
            "value": "[parameters('mhManagerUri')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekProvisionerClientId": {
            "value": "[variables('provisionerClientId')]"
          },
          "ekProvisionerClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('provisionerClientId'), '-secret')]"
            }
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "AlertMetrics",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppInsights",
        "Portal"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedBasicAlertMetricsTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "actionGroupId": {
            "value": "[reference('AppInsights').outputs.actionGroupId.value]"
          },
          "serviceNames": {
            "value": "[variables('serviceNames')]"
          },
          "servicePlanNames": {
            "value": "[variables('servicePlanNames')]"
          },
          "appInsightsLocation": {
            "value": "[parameters('appInsightsLocation')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "appInsightsName": {
            "value": "[parameters('appInsightsName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "APIManagement",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedApiManagementTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "apiManagementName": {
            "value": "[variables('apiManagementName')]"
          },
          "apiManagementNamedValueExtensionsKitUri": {
            "value": "[variables('ekApiUri')]"
          },
          "apiManagementNamedValueExtensionsKitWebhookUri": {
            "value": "[variables('webhookUri')]"
          },
          "apiManagementNamedValueExtensionsKitWebhookV2Uri": {
            "value": "[variables('webhookV2Uri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekOwnerEmail": {
            "value": "[parameters('ekOwnerEmail')]"
          },
          "ekOwnerName": {
            "value": "[parameters('ekOwnerName')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "apiManagementSkuName": {
            "value": "[parameters('apiManagementSkuName')]"
          },
          "apiManagementSkuCapacity": {
            "value": "[parameters('apiManagementSkuCapacity')]"
          }
        }
      }
    },
    {
      "condition": "[parameters('enableMTLS')]",
      "apiVersion": "2019-08-01",
      "name": "APIManagementWithCertificateFirstDeployment",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedApiManagementWithCertificateTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "apiManagementName": {
            "value": "[variables('apiManagementWithCertificateName')]"
          },
          "apiManagementNamedValueExtensionsKitUri": {
            "value": "[variables('ekApiUri')]"
          },
          "apiManagementNamedValueExtensionsKitWebhookUri": {
            "value": "[variables('webhookUri')]"
          },
          "apiManagementNamedValueExtensionsKitWebhookV2Uri": {
            "value": "[variables('webhookV2Uri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekOwnerEmail": {
            "value": "[parameters('ekOwnerEmail')]"
          },
          "ekOwnerName": {
            "value": "[parameters('ekOwnerName')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "apiManagementSkuName": {
            "value": "[parameters('apiManagementSkuName')]"
          },
          "apiManagementSkuCapacity": {
            "value": "[parameters('apiManagementSkuCapacity')]"
          },
          "enableMutualTLS": {
            "value": false
          }
        }
      }
    },
    {
      "condition": "[parameters('enableMTLS')]",
      "apiVersion": "2019-08-01",
      "name": "APIManagementWithCertificate",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "APIManagementWithCertificateFirstDeployment"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('linkedApiManagementWithCertificateTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "apiManagementName": {
            "value": "[variables('apiManagementWithCertificateName')]"
          },
          "apiManagementNamedValueExtensionsKitUri": {
            "value": "[variables('ekApiUri')]"
          },
          "apiManagementNamedValueExtensionsKitWebhookUri": {
            "value": "[variables('webhookUri')]"
          },
          "apiManagementNamedValueExtensionsKitWebhookV2Uri": {
            "value": "[variables('webhookV2Uri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekOwnerEmail": {
            "value": "[parameters('ekOwnerEmail')]"
          },
          "ekOwnerName": {
            "value": "[parameters('ekOwnerName')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "apiManagementSkuName": {
            "value": "[parameters('apiManagementSkuName')]"
          },
          "apiManagementSkuCapacity": {
            "value": "[parameters('apiManagementSkuCapacity')]"
          },
          "enableMutualTLS": {
            "value": true
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "ExtensionsService",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('extensionsApiFunctionAppTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('extensionsApiVersion')]"
          },
          "appServiceName": {
            "value": "[variables('extensionsAppServiceName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "documentDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "documentDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "documentDbSecondaryRegion": {
            "value": "[parameters('secondaryRegion')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "FlowService",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('flowServiceApiTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[variables('flowServiceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('flowServiceApiArtifactVersion')]"
          },
          "appServicePlanName": {
            "value": "[variables('userQueriesAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "ekAdminTenant": {
            "value": "[parameters('ekAdminTenant')]"
          },
          "ekExtensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "ekApiUri": {
            "value": "[variables('ekApiUri')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "cosmosDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "cosmosDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "documentDbSecondaryRegion": {
            "value": "[parameters('secondaryRegion')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "accessManagementUri": {
            "value": "[parameters('idsAmUri')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "discoveryUri": {
            "value": "[parameters('discoveryServiceUri')]"
          },
          "discoveryIdsUri": {
            "value": "[parameters('discoveryIdsUri')]"
          },
          "discoveryIdsClientId": {
            "value": "[parameters('discoveryIdsClientId')]"
          },
          "discoveryIdsClientSecret": {
            "value": "[parameters('discoveryIdsClientSecret')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          },
          "redisUri": {
            "value": "[parameters('primaryRedisUri')]"
          },
          "redisPrimaryKey": {
            "value": "[parameters('primaryRedisKey')]"
          },
          "xsltUrl": {
            "value": "[variables('xsltFunctionsUri')]"
          },
          "xsltFunctionKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-azure-function-secret')]"
            }
          },
          "enableSwagger": {
            "value": "[parameters('enableSwagger')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "XmlParserFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionXmlParseV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionXmlParseV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('xmlParseFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-xml-parse-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "xml-parse-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "JsonParserFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionJsonParseV2TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionJsonParseV2Version')]"
          },
          "functionAppName": {
            "value": "[variables('jsonParseFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-json-parse-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "json-parse-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "JsonToXmlFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionJsonToXmlV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionJsonToXmlV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('jsonToXmlFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-json-to-xml-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "json-to-xml-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "PgpEncryptFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionPgpEncryptV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionPgpEncryptV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('pgpEncryptFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-pgp-encrypt-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "pgp-encrypt-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "PgpDecryptFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionPgpDecryptV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionPgpDecryptV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('pgpDecryptFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-pgp-decrypt-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "pgp-decrypt-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "SignXmlFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionSignXmlV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "extensionSuffix": {
            "value": "-sign-xml-function"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionSignXmlV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "sign-xml-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "storageConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "VerifyXmlFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionVerifyXmlV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "extensionSuffix": {
            "value": "-verify-xml-function"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionVerifyXmlV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "verify-xml-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "storageConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "StopFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionStopV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionStopV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('stopFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-stop-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "stop-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "ForEachFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionForEachV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionForEachV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('forEachFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-for-each-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "for-each-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "SftpListFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights",
        "HttpRequestFunctionApp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionSftpListV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionSftpListV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "sftp-list-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "extensionSuffix": {
            "value": "-sftp-list-function"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "SftpGetContentFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights",
        "SftpListFunctionApp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionSftpGetContentV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionSftpGetContentV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "sftp-get-content-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "extensionSuffix": {
            "value": "-sftp-get-content-function"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "SftpDeleteFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionSftpDeleteV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionSftpDeleteV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "sftp-delete-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "extensionSuffix": {
            "value": "-sftp-delete-function"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "SftpCreateFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionSftpCreateV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionSftpCreateV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "sftp-create-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "extensionSuffix": {
            "value": "-sftp-create-function"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "XsltFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionXsltV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionXsltV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('xsltFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-xslt-transformation-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "xslt-transformation-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "Xslt3FunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionXslt3V1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionXslt3V1Version')]"
          },
          "extensionSuffix": {
            "value": "-xslt3-transformation-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "xslt3-transformation-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          },
          "xsltUrl": {
            "value": "[variables('xsltFunctionsUri')]"
          },
          "xsltFunctionKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-azure-function-secret')]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "EventGridPublishFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionEventGridPublishV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('actionEventGridPublishV1Version')]"
          },
          "functionAppName": {
            "value": "[variables('eventGridPublishFunctionAppServiceName')]"
          },
          "extensionSuffix": {
            "value": "-event-grid-publish-function"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "event-grid-publish-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "HttpRequestFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionHttpRequestV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionHttpRequestV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "http-request-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "storageConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "Unit4IdResolverFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionUnit4IdResolverV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionUnit4IdResolverV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "u4id-resolver-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "amUri": {
            "value": "[parameters('idsAmUri')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "FlowNotificationFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('notificationsFunctionTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "functionAppName": {
            "value": "[variables('flowNotificationFunctionAppServiceName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "FlowHistoryDocumentDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "FlowHistoryDocumentDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "FlowHistoryDocumentDbConnection": {
            "value": "[parameters('primaryDocumentDbConnectionString')]"
          },
          "serviceVersion": {
            "value": "[parameters('notificationsFunctionVersion')]"
          },
          "idsAmUri": {
            "value": "[parameters('idsAmUri')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "apiUriExtensionsKit": {
            "value": "[variables('ekApiUri')]"
          },
          "portalUri": {
            "value": "[variables('ekPortalUri')]"
          },
          "sendGridApiKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-send-grid-api-key')]"
            }
          },
          "emailSender": {
            "value": "[parameters('extensionKitEmail')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "InvitationSenderFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('invitationSenderFunctionTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "functionAppName": {
            "value": "[variables('invitationSenderFunctionAppServiceName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "serviceVersion": {
            "value": "[parameters('invitationSenderFunctionVersion')]"
          },
          "sendGridApiKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-send-grid-api-key')]"
            }
          },
          "emailSender": {
            "value": "[parameters('extensionKitEmail')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "DaPushTextFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionDaPushTextV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionDaPushTextV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "da-push-text-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "daPushApiUri": {
            "value": "[parameters('daPushApiUri')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "DaPushTravelRequestFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionDaTravelRequestV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionDaTravelRequestV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "da-push-travelrequest-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "daPushApiUri": {
            "value": "[parameters('daPushApiUri')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "DaQuestionFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionDaQuestionV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionDaQuestionV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "da-question-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "ekIdsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "daPushApiUri": {
            "value": "[parameters('daPushApiUri')]"
          },
          "hibernationApiUri": {
            "value": "[variables('hibernationApiUri')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          },
          "ekFunctionSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-azure-function-secret')]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "MhActorFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionMhActorV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionMhActorV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "mh-genactor-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "mhManagerUri": {
            "value": "[parameters('mhManagerUri')]"
          },
          "mhAccessProviderUri": {
            "value": "[parameters('mhAccessProviderUri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekProvisionerClientId": {
            "value": "[variables('provisionerClientId')]"
          },
          "ekProvisionerClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('provisionerClientId'), '-secret')]"
            }
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "hibernationApiUri": {
            "value": "[variables('hibernationApiUri')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          },
          "ekFunctionSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-azure-function-secret')]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "MhEventFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionMhEventV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionMhEventV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "mh-event-action-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "mhManagerUri": {
            "value": "[parameters('mhManagerUri')]"
          },
          "mhAccessProviderUri": {
            "value": "[parameters('mhAccessProviderUri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "provisionerClientId": {
            "value": "[variables('provisionerClientId')]"
          },
          "provisionerClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('provisionerClientId'), '-secret')]"
            }
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "XmlEncryptFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionXmlEncryptV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "extensionSuffix": {
            "value": "-xml-encrypt-function"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionXmlEncryptV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "xml-encrypt-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "storageConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "XmlDecryptFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionXmlDecryptV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "extensionSuffix": {
            "value": "-xml-decrypt-function"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionXmlDecryptV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "xml-decrypt-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultUri": {
            "value": "[reference(concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName')), '2016-10-01').vaultUri]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "ekTenantsApiUri": {
            "value": "[variables('tenantsApiUri')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "storageConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "HibernationService",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights",
        "Certificate"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('hibernationServicesTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('hibernationServicesVersion')]"
          },
          "hibernationName": {
            "value": "[variables('hibernationName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "logTraceLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "SchedulerTrigger",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('triggerSchedulerV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('triggerSchedulerV1Version')]"
          },
          "schedulerName": {
            "value": "[variables('schedulerName')]"
          },
          "appServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekTenant": {
            "value": "[parameters('serviceName')]"
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "ekApiUri": {
            "value": "[variables('ekApiUri')]"
          },
          "extensionsApiUri": {
            "value": "[variables('extensionsApiUri')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "storageEventsContainer": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "EmailFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionEmailV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionEmailV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "email-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "sendGridApiKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-send-grid-api-key')]"
            }
          },
          "ekEmailSender": {
            "value": "[parameters('extensionKitEmail')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "InstantUIFunctionApp",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('actionInstantUiV1TemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceName": {
            "value": "[parameters('serviceName')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "serviceVersion": {
            "value": "[parameters('actionInstantUiV1Version')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          },
          "storageQueueName": {
            "value": "instant-ui-queue"
          },
          "eventGridStorageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "eventGridStorageLocation": {
            "value": "[parameters('eventGridStorageLocation')]"
          },
          "eventGridMaxEventSizeKb": {
            "value": "[parameters('eventGridMaxEventSizeKb')]"
          },
          "eventGridFlowEventsTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridFlowEventsTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "eventGridInternalKey": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[variables('ekInternalEventGridKey')]"
            }
          },
          "ekIdsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "ekInternalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "ekInternalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "ekSourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "daPushApiUri": {
            "value": "[parameters('daPushApiUri')]"
          },
          "hibernationApiUri": {
            "value": "[variables('hibernationApiUri')]"
          },
          "instantUIApiUri": {
            "value": "[parameters('instantUIApiUri')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          },
          "ekFunctionSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(parameters('serviceName'), '-azure-function-secret')]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "TenantExecutionUpdaterFunction",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('tenantConsumptionUpdaterUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "serviceVersion": {
            "value": "[parameters('tenantConsumptionUpdaterArtifactVersion')]"
          },
          "functionAppName": {
            "value": "[variables('tenantConsumptionUpdaterFunctionName')]"
          },
          "appServicePlanName": {
            "value": "[variables('noScaleAppServicePlanName')]"
          },
          "flowHistoryDocumentDbConnection": {
            "value": "[parameters('primaryDocumentDbConnectionString')]"
          },
          "flowHistoryDocumentDbSecondaryRegion": {
            "value": "[parameters('secondaryRegion')]"
          },
          "tenantInformationDbConnection": {
            "value": "[parameters('primaryDocumentDbConnectionString')]"
          },
          "tenantInformationDbUri": {
            "value": "[parameters('primaryDocumentDbUri')]"
          },
          "tenantInformationDbKey": {
            "value": "[parameters('primaryDocumentDbKey')]"
          },
          "eventGridTopicEndpoint": {
            "value": "[parameters('primaryEventGridTopicEndpoint')]"
          },
          "eventGridTopicAccessKey": {
            "value": "[parameters('primaryEventGridTopicAccessKey')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          },
          "storageAccountConnectionString": {
            "value": "[parameters('primaryStorageAccountConnectionString')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "primary": {
            "value": "[variables('primary')]"
          }
        }
      }
    },
    {
      "apiVersion": "2019-08-01",
      "name": "TenantActivationFunction",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "AppServicePlans",
        "DocumentDB",
        "StorageAccount",
        "AppInsights"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('tenantActivationFunctionTemplateUri')]",
          "contentVersion": "1.0.0.0"
        },
        "debugSetting": {
          "detailLevel": "requestContent,responseContent"
        },
        "parameters": {
          "amUri": {
            "value": "[parameters('idsAmUri')]"
          },
          "appInsightsInstrumentationKey": {
            "value": "[reference('AppInsights').outputs.appInsightsInstrumentationKey.value]"
          },
          "certificateThumbprint": {
            "value": "[if(equals(parameters('withCertificate'), 'yes'), reference('Certificate').outputs.X509Certificate2Thumbprint.value, '')]"
          },
          "customDomain": {
            "value": "[parameters('customDomain')]"
          },
          "customServiceName": {
            "value": "[parameters('customServiceName')]"
          },
          "defaultConsumptionThreshold": {
            "value": "[parameters('defaultConsumptionThreshold')]"
          },
          "deploymentModel": {
            "value": "[parameters('deploymentModel')]"
          },
          "documentDbSecondaryRegion": {
            "value": "[parameters('secondaryRegion')]"
          },
          "functionAppName": {
            "value": "[variables('tenantActivationFunctionName')]"
          },
          "generalAppServicePlanName": {
            "value": "[variables('consumptionAppServicePlanName')]"
          },
          "idsUri": {
            "value": "[variables('idsAuthority')]"
          },
          "internalClientId": {
            "value": "[variables('internalClientId')]"
          },
          "internalClientSecret": {
            "reference": {
              "keyVault": {
                "id": "[concat('/subscriptions/', parameters('keyVaultSubscription'), '/resourceGroups/',parameters('keyVaultResourceGroup'),'/providers/Microsoft.KeyVault/vaults/', parameters('keyVaultName'))]"
              },
              "secretName": "[concat(variables('internalClientId'), '-secret')]"
            }
          },
          "logLevel": {
            "value": "[parameters('u4LogTraceLevel')]"
          },
          "serviceVersion": {
            "value": "[parameters('tenantActivationFunctionVersion')]"
          },
          "sourceSystem": {
            "value": "[parameters('sourceSystem')]"
          },
          "storageAccountConnectionString": {
            "value": "[reference('StorageAccount').outputs.storageAccountConnectionString.value]"
          },
          "tenantInformationDbKey": {
            "value": "[reference('DocumentDb').outputs.documentDbKey.value]"
          },
          "tenantInformationDbUri": {
            "value": "[reference('DocumentDb').outputs.documentDbUri.value]"
          },
          "u4costId": {
            "value": "[parameters('u4costId')]"
          }
        }
      }
    }
  ]
}
